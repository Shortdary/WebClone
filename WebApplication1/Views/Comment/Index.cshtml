@using System.Security.Claims
@model PostDetailWithUser
@{
    int userId = 0;
    if (ViewContext.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier) is not null)
    {

        userId = int.Parse(ViewContext.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier)!.Value);
    }
}


<link rel="stylesheet" href="@(Url.Content("~/css/Comment.css"))" />

<div class="commentsTitle">댓글</div>
<div class="comments" id="comments">
    <div class="best">
    </div>
    @foreach (var c in Model.Comments)
    {
        <div class="comment" id=@("comment" + c.Id) aid=@c.PostId uid=@c.CreatedUid pid=@c.ParentCommentId gid=@c.Id>
            <div class="main @(@c.ParentCommentId is null? string.Empty : "isReply")">
                <div class="userImage" style="background-image: url('/asset/defaultuser.png');"></div>
                <div class="commentWrapper">
                    <div class="info">
                        <div class="left">
                            <div class="nickName">
                                <div class="text">
                                    <span>@c.Nickname</span>
                                    @if (c.CreatedUid == Model.CreatedUid)
                                    {
                                        <span class="author">글쓴이</span>
                                    }
                                    @if (c.CreatedUid == userId)
                                    {
                                        <span class="author">나</span>
                                    }
                                </div>
                            </div>
                            <div class="counts">
                                <div class="datetime">@c.CreatedTime</div>
                                @if (c.LikeCount > 0)
                                {
                                    <div class="dot"></div>
                                    <div class="likeCount">
                                        <i class="fa-regular fa-thumbs-up"></i>
                                        @c.LikeCount
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="right">
                            <div class="commentReply"><button id="commentReply">댓글</button></div>
                            <div class="likeBtn">
                                <div class="commentLike"><button id="commentLike">침하하😂</button></div>
                            </div>
                            <span class="popUpBtn" name="popUpBtn">
                                <i class="fa-solid fa-ellipsis-vertical"></i>
                            </span>
                            <ul id="popUp" name="popUp">
                                @if (c.CreatedUid == userId)
                                {
                                    <li class="commentEdit"><button id="commentEdit"><i class="fa-regular fa-edit"></i>&nbsp;수정</button></li>

                                    @using (Html.BeginForm("Delete", "Comment", FormMethod.Post, new { @name = "commentForm" }))
                                    {
                                        <input type="hidden" id="Id" name="Id" value="@c.Id" />
                                        <li class="commentDelete">
                                            <button id="commentDelete" type="submit">
                                                <i class="fa-regular fa-trash-alt"></i>&nbsp;삭제
                                            </button>
                                        </li>
                                        @Html.AntiForgeryToken();
                                    }
                                }
                                <li class="report"><button type="button"><i class="fa-regular fa-flag"></i>&nbsp;신고</button></li>
                                <li class="block"><button type="button"><i class="fa-solid fa-ban"></i>&nbsp;차단</button></li>
                            </ul>
                        </div>
                    </div>
                    <div class="commentContent" id="commentContent">
                        <div style="color: @(c.IsDeleted ? "grey" : "")">@(c.IsDeleted ? "[삭제 된 댓글입니다.]" : c.Comment1)</div>
                    </div>
                    <div class="commentContainer" id="commentEtc"></div>
                </div>
            </div>

        </div>
    }
</div>
<div class="commentContainer" id="newComment">
    <div class="contentContainer">
        <div class="commentInput">
            @if (User.Identity.IsAuthenticated)
            {
                @using (Html.BeginForm("Add", "Comment", FormMethod.Post, new { @name = "commentForm" }))
                {
                    <div class="commentContent">
                        @Html.TextArea("Comment1", "", new { @placeholder = "댓글을 작성해주세요", @maxlength = "400" })
                        <div class="attached"></div>
                    </div>
                    <input type="hidden" id="PostId" name="PostId" value=@Model.Id />
                    <input type="hidden" id="ParentCommentId" name="ParentCommentId" value=null />
                    <div class="submit"><button>등록</button></div>
                    @Html.AntiForgeryToken()
                }
            }
            else
            {
                <div class="commentContent">
                    <textarea disabled="" name="content" placeholder="로그인 해주세요"></textarea>
                    <div class="attached"></div>
                </div>
                <div class="submit"><button type="button" onclick="redirectToLoginPage()">로그인</button></div>
            }
        </div>
    </div>
</div>
<script>
    function redirectToLoginPage() {
        window.location.href = "/login?redirect_url=" + '@ViewBag.RequestUrl';
    }
</script>
<script>
    const popUpBtns = document.getElementsByName('popUpBtn');
    for (const btn of popUpBtns) {
        btn.addEventListener('click', (e) => {
            const siblings = e.currentTarget.parentElement.children;
            const popUp = siblings.popUp;
            if (window.getComputedStyle(popUp).display == 'none') {
                popUp.classList.add('active');
            } else {
                popUp.classList.remove('active');
            }
        });
    }
</script>
<script>
    const commentForms = document.getElementsByName('commentForm')
    for (const form of commentForms) {
        form.addEventListener('submit', function () {
            sessionStorage.setItem('scrollPosition', window.scrollY);
        });
    }
    
    window.onload = function () {
        var scrollPosition = sessionStorage.getItem('scrollPosition');
        if (scrollPosition) {
            window.scrollTo(0, scrollPosition);
            sessionStorage.removeItem('scrollPosition');
        }
    };
</script>
